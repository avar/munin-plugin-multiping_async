#!/home/v-perlbrew/perl5/perlbrew/bin/perl
use lib '/usr/share/perl5';
package Munin::Plugin::Multiping::Async;
use 5.10.0;
use MooseX::POE;
use MooseX::POE::SweetArgs qw(event);
use POE::Quickie;
use Munin::Plugin;
use Digest;

=head1 NAME

multiping_async - Like the multiping plugin but runs asynchronously

=head1 SYNOPSIS

    munin-run multiping_async

=head1 CONFIGURATION

The following environment variables are used:

    host - Whitespace-seperated list of hosts to ping
    ping - How many times to ping the hosts, 3 by default

Configuration example:

    [multiping_async]
    user root
    env.host www.example.org mail.example.org
    # Optional, how many times to ping each host, we'll report the average
    #env.times 3

=head1 DESCRIPTION

Like the L<munin
multiping|http://munin-monitoring.org/browser/people/janl/src/node/node.d/multiping>
plugin except that it runs L<ping(1)> asynchronously with POE, and you
can add/remove hosts later on without screwing up your RRD files
(multiping reports statistics based on the order of hosts in
C<hosts=>).

This plugin used to use L<POE::Component::Client::Ping> but I switched
away from it due to having odd timing issues with it, and it had to
run as root.

This plugin requires the L<MooseX::POE> and L<POE::Quickie> modules
from CPAN.

=head1 AUTHOR

E<AElig>var ArnfjE<ouml>rE<eth> Bjarmason <avar@cpan.org>

=head1 LICENSE

This program is in the public domain.

=head1 MAGIC MARKERS

 #%# family=manual

=cut

has hosts => (
    isa        => 'ArrayRef',
    is         => 'ro',
    auto_deref => 1,
    default    => sub { [ split /\s+/, $ENV{host} ] },
    documentation => "Hosts we're going to ping",
);

has times => (
    isa           => 'Int',
    is            => 'ro',
    default       => $ENV{times} // 3,
    documentation => "How many times we ping each host (ping -c)",
);

has should_config => (
    isa => 'Bool',
    is => 'ro',
    default => sub { defined $ARGV[0] and $ARGV[0] eq "config" },
    documentation => 'Spew out config section?',
);

sub START {
    my ($self, $heap) = @_[0, HEAP];

    if ($self->should_config) {
        $self->yield( print_config => $self->hosts );
        return;
    }

    $heap->{quickie} = POE::Quickie->new();

    for ($self->hosts) {
        $heap->{quickie}->run(
            Program     => [ 'ping', '-c', $self->times => $_ ],
            StdoutEvent => 'stdout',
            Context     => $_,
        );
    }
}

event stdout => sub {
    my ($self, $output, undef, $context) = @_;

    given ($output) {
        my $noslash = qr{[^/]+};
        when (m[^rtt min/avg/max/mdev = (?<min>$noslash)/(?<avg>$noslash)/(?<max>$noslash)/]) {
            $self->yield( print_host => $context => $+{avg} );
        }
    }
};

event print_config => sub {
    my ($self) = @_;
    my $times = $self->times;
    print <<GRAPH;
graph_title Ping times
graph_args --base 1000 -l 0
graph_vlabel seconds
graph_category network
graph_info Average ping times (over $times pings)
GRAPH
    for my $host ($self->hosts) {
        my $fieldname = $self->fieldname($host);
        print <<HOST;
$fieldname.label $host
$fieldname.info Average ping time over $times pings for $host
$fieldname.draw LINE2
HOST
    }
};

event print_host => sub {
    my ($self, $context, $avg) = @_;

    my $fieldname = $self->fieldname($context);
    my $value = sprintf "%6.6f", $avg;

    say "$fieldname.value $value";
};

sub fieldname {
    my ($self, $name) = @_;
    my $sha1 = substr Digest->new("SHA-1")->add($name)->hexdigest, 0, 10;
    return clean_fieldname($name) . '_' . $sha1;
}

no MooseX::POE;
Munin::Plugin::Multiping::Async->new;
POE::Kernel->run;
